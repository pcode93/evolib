package task

import logging.ConsoleLogger
import operator.Operators
import operator.crossover.PMX
import operator.mutate.{GaussianShuffle, UnifShuffle, AdaptiveGaussianShuffle}
import operator.select.ProportionalSelect
import operator.stopcase.IterationNumberStopcase
import org.scalatest.FlatSpec
import solver.{MuLambda, MuPlusLambda}

class TravellingSalesmanTaskSpec extends FlatSpec {
  val solver = new MuPlusLambda(
    operators = Operators(
      new PMX,
      new AdaptiveGaussianShuffle,
      new ProportionalSelect,
      new ProportionalSelect,
      new IterationNumberStopcase(200)
    ),
    mu = 50,
    lambda = 100,
    Some(new ConsoleLogger)
  )

  val params = List((10, 20), (50,100), (100,200))

  val distances = List(
    List(0,295,171,455,198,347,310,180,417,442,642,302,559,285,214,400,111,136,295,217,261,258,516,338,297,98,514,530,390,446),
    List(295,0,320,109,571,272,478,117,585,609,715,469,754,599,536,568,364,267,463,142,307,425,683,192,168,425,682,697,557,614),
    List(171,320,0,428,247,474,476,184,583,607,801,461,718,452,381,559,278,295,454,317,87,417,675,410,163,265,673,689,549,605),
    List(455,109,428,0,668,369,575,217,681,705,812,567,851,696,633,665,462,365,560,240,401,523,780,290,262,522,779,795,654,711),
    List(198,571,247,668,0,534,497,374,394,429,829,489,627,336,225,364,270,323,482,430,332,445,504,525,413,192,586,518,387,481),
    List(347,272,474,369,534,0,174,331,555,579,440,283,480,564,501,533,330,217,202,200,576,391,649,100,437,390,505,442,523,579),
    List(310,478,476,575,497,174,0,362,307,331,342,140,254,322,343,291,225,218,59,337,567,164,336,280,525,353,245,274,281,246),
    List(180,117,184,217,374,331,362,0,476,501,694,354,612,483,390,452,249,152,347,132,215,310,568,230,157,275,566,582,442,498),
    List(417,585,583,681,394,555,307,476,0,36,337,167,234,60,168,66,270,337,251,443,674,170,111,539,631,249,193,125,39,92),
    List(442,609,607,705,429,579,331,501,36,0,321,191,218,95,203,90,294,361,275,468,698,194,84,563,655,284,177,109,63,101),
    List(642,715,801,812,829,440,342,694,337,321,0,327,92,390,496,359,557,537,392,670,899,382,277,544,880,685,145,212,347,250),
    List(302,469,461,567,489,283,140,354,167,191,327,0,239,182,214,151,155,226,82,330,566,45,267,431,523,221,193,202,141,144),
    List(559,754,718,851,627,480,254,612,234,218,92,239,0,295,401,273,413,484,268,587,817,280,174,583,920,451,41,109,262,147),
    List(285,599,452,696,336,564,322,483,60,95,390,182,295,0,110,31,217,356,264,459,543,186,172,555,647,192,254,186,54,149),
    List(214,536,381,633,225,501,343,390,168,203,496,214,401,110,0,138,176,293,280,396,472,173,278,495,509,122,360,292,161,255),
    List(400,568,559,665,364,533,291,452,66,90,359,151,273,31,138,0,254,325,234,428,659,154,166,523,616,218,227,180,23,116),
    List(111,364,278,462,270,330,225,249,270,294,557,155,413,217,176,254,0,122,165,225,366,111,369,319,371,81,368,383,243,299),
    List(136,267,295,365,323,217,218,152,337,361,537,226,484,356,293,325,122,0,201,128,396,183,440,206,314,182,439,454,314,371),
    List(295,463,454,560,482,202,59,347,251,275,392,82,268,264,280,234,165,201,0,323,551,102,300,309,508,244,233,262,223,215),
    List(217,142,317,240,430,200,337,132,443,468,670,330,587,459,396,428,225,128,323,0,448,286,543,100,308,285,542,558,417,474),
    List(261,307,87,401,332,576,567,215,674,698,899,566,817,543,472,659,366,396,551,448,0,518,774,495,151,355,772,787,645,704),
    List(258,425,417,523,445,391,164,310,170,194,382,45,280,186,173,154,111,183,102,286,518,0,270,380,465,161,235,283,141,200),
    List(516,683,675,780,504,649,336,568,111,84,277,267,174,172,278,166,369,440,300,543,774,270,0,638,723,360,133,61,139,85),
    List(338,192,410,290,525,100,280,230,539,563,544,431,583,555,495,523,319,206,309,100,495,380,638,0,357,381,608,652,510,569),
    List(297,168,163,262,413,437,525,157,631,655,880,523,920,647,509,616,371,314,508,308,151,465,723,357,0,392,729,744,602,661),
    List(98,425,265,522,192,390,353,275,249,284,685,221,451,192,122,218,81,182,244,285,355,161,360,381,392,0,406,372,240,338),
    List(514,682,673,779,586,505,245,566,193,177,145,193,41,254,360,227,368,439,233,542,772,235,133,608,729,406,0,67,221,106),
    List(530,697,689,795,518,442,274,582,125,109,212,202,109,186,292,180,383,454,262,558,787,283,61,652,744,372,67,0,153,53),
    List(390,557,549,654,387,523,281,442,39,63,347,141,262,54,161,23,243,314,223,417,645,141,139,510,602,240,221,153,0,94),
    List(446,614,605,711,481,579,246,498,92,101,250,144,147,149,255,116,299,371,215,474,704,200,85,569,661,338,106,53,94,0)
  )

  val task = new TravellingSalesmanTask(distances, 0, 25)

  params.foreach(ml => {
    List(new UnifShuffle, new GaussianShuffle, new AdaptiveGaussianShuffle).foreach(op => new MuPlusLambda(
      operators = Operators(
        new PMX,
        op,
        new ProportionalSelect,
        new ProportionalSelect,
        new IterationNumberStopcase(50)
      ),
      mu = ml._1,
      lambda = ml._2,
      Some(new ConsoleLogger)
    ).solve(task))
  })

  params.foreach(ml => {
    List(new UnifShuffle, new GaussianShuffle, new AdaptiveGaussianShuffle).foreach(op => new MuLambda(
      operators = Operators(
        new PMX,
        op,
        new ProportionalSelect,
        new ProportionalSelect,
        new IterationNumberStopcase(50)
      ),
      mu = ml._1,
      lambda = ml._2,
      Some(new ConsoleLogger)
    ).solve(task))
  })
}
